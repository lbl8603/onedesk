// This file is generated by rust-protobuf 3.0.0-alpha.1. Do not edit
// .proto file is parsed by protobuf-codegen-pure=3.0.0-alpha.1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `message.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_ALPHA_1;

#[derive(PartialEq,Clone,Default)]
pub struct ClientHello {
    // message fields
    pub my_id: ::std::string::String,
    pub peer_id: ::std::string::String,
    pub rand1: u64,
    pub rand2: u64,
    pub key: ::std::vec::Vec<u8>,
    pub nonce: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientHello {
    fn default() -> &'a ClientHello {
        <ClientHello as ::protobuf::Message>::default_instance()
    }
}

impl ClientHello {
    pub fn new() -> ClientHello {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "my_id",
            |m: &ClientHello| { &m.my_id },
            |m: &mut ClientHello| { &mut m.my_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "peer_id",
            |m: &ClientHello| { &m.peer_id },
            |m: &mut ClientHello| { &mut m.peer_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rand1",
            |m: &ClientHello| { &m.rand1 },
            |m: &mut ClientHello| { &mut m.rand1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rand2",
            |m: &ClientHello| { &m.rand2 },
            |m: &mut ClientHello| { &mut m.rand2 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &ClientHello| { &m.key },
            |m: &mut ClientHello| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "nonce",
            |m: &ClientHello| { &m.nonce },
            |m: &mut ClientHello| { &mut m.nonce },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClientHello>(
            "ClientHello",
            0,
            fields,
        )
    }
}

impl ::protobuf::Message for ClientHello {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.my_id = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.peer_id = is.read_string()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rand1 = is.read_uint64()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rand2 = is.read_uint64()?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.key = is.read_bytes()?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.nonce = is.read_bytes()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.my_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.my_id);
        }
        if !self.peer_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.peer_id);
        }
        if self.rand1 != 0 {
            my_size += ::protobuf::rt::value_size(3, self.rand1, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rand2 != 0 {
            my_size += ::protobuf::rt::value_size(4, self.rand2, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.key);
        }
        if !self.nonce.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.nonce);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.my_id.is_empty() {
            os.write_string(1, &self.my_id)?;
        }
        if !self.peer_id.is_empty() {
            os.write_string(2, &self.peer_id)?;
        }
        if self.rand1 != 0 {
            os.write_uint64(3, self.rand1)?;
        }
        if self.rand2 != 0 {
            os.write_uint64(4, self.rand2)?;
        }
        if !self.key.is_empty() {
            os.write_bytes(5, &self.key)?;
        }
        if !self.nonce.is_empty() {
            os.write_bytes(6, &self.nonce)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> ClientHello {
        ClientHello::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 0)
    }

    fn default_instance() -> &'static ClientHello {
        static instance: ClientHello = ClientHello {
            my_id: ::std::string::String::new(),
            peer_id: ::std::string::String::new(),
            rand1: 0,
            rand2: 0,
            key: ::std::vec::Vec::new(),
            nonce: ::std::vec::Vec::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for ClientHello {
    fn clear(&mut self) {
        self.my_id.clear();
        self.peer_id.clear();
        self.rand1 = 0;
        self.rand2 = 0;
        self.key.clear();
        self.nonce.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientHello {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientHello {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct ServerHello {
    // message fields
    pub rand1: u64,
    pub rand2: u64,
    pub hash: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerHello {
    fn default() -> &'a ServerHello {
        <ServerHello as ::protobuf::Message>::default_instance()
    }
}

impl ServerHello {
    pub fn new() -> ServerHello {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rand1",
            |m: &ServerHello| { &m.rand1 },
            |m: &mut ServerHello| { &mut m.rand1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rand2",
            |m: &ServerHello| { &m.rand2 },
            |m: &mut ServerHello| { &mut m.rand2 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hash",
            |m: &ServerHello| { &m.hash },
            |m: &mut ServerHello| { &mut m.hash },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ServerHello>(
            "ServerHello",
            1,
            fields,
        )
    }
}

impl ::protobuf::Message for ServerHello {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rand1 = is.read_uint64()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rand2 = is.read_uint64()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.hash = is.read_bytes()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.rand1 != 0 {
            my_size += ::protobuf::rt::value_size(1, self.rand1, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rand2 != 0 {
            my_size += ::protobuf::rt::value_size(2, self.rand2, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.rand1 != 0 {
            os.write_uint64(1, self.rand1)?;
        }
        if self.rand2 != 0 {
            os.write_uint64(2, self.rand2)?;
        }
        if !self.hash.is_empty() {
            os.write_bytes(3, &self.hash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> ServerHello {
        ServerHello::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 1)
    }

    fn default_instance() -> &'static ServerHello {
        static instance: ServerHello = ServerHello {
            rand1: 0,
            rand2: 0,
            hash: ::std::vec::Vec::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for ServerHello {
    fn clear(&mut self) {
        self.rand1 = 0;
        self.rand2 = 0;
        self.hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServerHello {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerHello {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct LoginRequest {
    // message fields
    pub password: ::std::vec::Vec<u8>,
    pub hash: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a LoginRequest {
    fn default() -> &'a LoginRequest {
        <LoginRequest as ::protobuf::Message>::default_instance()
    }
}

impl LoginRequest {
    pub fn new() -> LoginRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "password",
            |m: &LoginRequest| { &m.password },
            |m: &mut LoginRequest| { &mut m.password },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hash",
            |m: &LoginRequest| { &m.hash },
            |m: &mut LoginRequest| { &mut m.hash },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LoginRequest>(
            "LoginRequest",
            2,
            fields,
        )
    }
}

impl ::protobuf::Message for LoginRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.password = is.read_bytes()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.hash = is.read_bytes()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.password.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.password);
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.password.is_empty() {
            os.write_bytes(1, &self.password)?;
        }
        if !self.hash.is_empty() {
            os.write_bytes(2, &self.hash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> LoginRequest {
        LoginRequest::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 2)
    }

    fn default_instance() -> &'static LoginRequest {
        static instance: LoginRequest = LoginRequest {
            password: ::std::vec::Vec::new(),
            hash: ::std::vec::Vec::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for LoginRequest {
    fn clear(&mut self) {
        self.password.clear();
        self.hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LoginRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LoginRequest {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct LoginResponse {
    // message fields
    pub code: ::protobuf::ProtobufEnumOrUnknown<login_response::Code>,
    pub error: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a LoginResponse {
    fn default() -> &'a LoginResponse {
        <LoginResponse as ::protobuf::Message>::default_instance()
    }
}

impl LoginResponse {
    pub fn new() -> LoginResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &LoginResponse| { &m.code },
            |m: &mut LoginResponse| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "error",
            |m: &LoginResponse| { &m.error },
            |m: &mut LoginResponse| { &mut m.error },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LoginResponse>(
            "LoginResponse",
            3,
            fields,
        )
    }
}

impl ::protobuf::Message for LoginResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.code = is.read_enum_or_unknown()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.error = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != ::protobuf::ProtobufEnumOrUnknown::new(login_response::Code::NotMatch) {
            my_size += ::protobuf::rt::enum_or_unknown_size(1, self.code);
        }
        if !self.error.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.error);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != ::protobuf::ProtobufEnumOrUnknown::new(login_response::Code::NotMatch) {
            os.write_enum(1, ::protobuf::ProtobufEnumOrUnknown::value(&self.code))?;
        }
        if !self.error.is_empty() {
            os.write_string(2, &self.error)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> LoginResponse {
        LoginResponse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 3)
    }

    fn default_instance() -> &'static LoginResponse {
        static instance: LoginResponse = LoginResponse {
            code: ::protobuf::ProtobufEnumOrUnknown::from_i32(0),
            error: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for LoginResponse {
    fn clear(&mut self) {
        self.code = ::protobuf::ProtobufEnumOrUnknown::new(login_response::Code::NotMatch);
        self.error.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LoginResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LoginResponse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `LoginResponse`
pub mod login_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    pub enum Code {
        NotMatch = 0,
        Success = 1,
        Frequently = 2,
    }

    impl ::protobuf::ProtobufEnum for Code {
        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Code> {
            match value {
                0 => ::std::option::Option::Some(Code::NotMatch),
                1 => ::std::option::Option::Some(Code::Success),
                2 => ::std::option::Option::Some(Code::Frequently),
                _ => ::std::option::Option::None
            }
        }

        fn values() -> &'static [Self] {
            static values: &'static [Code] = &[
                Code::NotMatch,
                Code::Success,
                Code::Frequently,
            ];
            values
        }

        fn enum_descriptor_static() -> ::protobuf::reflect::EnumDescriptor {
            ::protobuf::reflect::EnumDescriptor::new_generated_2(super::file_descriptor(), 3)
        }
    }

    impl ::std::default::Default for Code {
        fn default() -> Self {
            Code::NotMatch
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Code {
        type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeEnum<Self>;
    }

    impl Code {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new_2::<Code>("LoginResponse.Code", 3)
        }
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RemoteMessage {
    // message oneof groups
    pub union: ::std::option::Option<remote_message::Union>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a RemoteMessage {
    fn default() -> &'a RemoteMessage {
        <RemoteMessage as ::protobuf::Message>::default_instance()
    }
}

impl RemoteMessage {
    pub fn new() -> RemoteMessage {
        ::std::default::Default::default()
    }

    // .ClientHello client_hello = 1;

    pub fn get_client_hello(&self) -> &ClientHello {
        match self.union {
            ::std::option::Option::Some(remote_message::Union::client_hello(ref v)) => v,
            _ => <ClientHello as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_client_hello(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_client_hello(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(remote_message::Union::client_hello(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_client_hello(&mut self, v: ClientHello) {
        self.union = ::std::option::Option::Some(remote_message::Union::client_hello(v))
    }

    // Mutable pointer to the field.
    pub fn mut_client_hello(&mut self) -> &mut ClientHello {
        if let ::std::option::Option::Some(remote_message::Union::client_hello(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(remote_message::Union::client_hello(ClientHello::new()));
        }
        match self.union {
            ::std::option::Option::Some(remote_message::Union::client_hello(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_client_hello(&mut self) -> ClientHello {
        if self.has_client_hello() {
            match self.union.take() {
                ::std::option::Option::Some(remote_message::Union::client_hello(v)) => v,
                _ => panic!(),
            }
        } else {
            ClientHello::new()
        }
    }

    // .ServerHello server_hello = 2;

    pub fn get_server_hello(&self) -> &ServerHello {
        match self.union {
            ::std::option::Option::Some(remote_message::Union::server_hello(ref v)) => v,
            _ => <ServerHello as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_server_hello(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_server_hello(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(remote_message::Union::server_hello(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_server_hello(&mut self, v: ServerHello) {
        self.union = ::std::option::Option::Some(remote_message::Union::server_hello(v))
    }

    // Mutable pointer to the field.
    pub fn mut_server_hello(&mut self) -> &mut ServerHello {
        if let ::std::option::Option::Some(remote_message::Union::server_hello(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(remote_message::Union::server_hello(ServerHello::new()));
        }
        match self.union {
            ::std::option::Option::Some(remote_message::Union::server_hello(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_server_hello(&mut self) -> ServerHello {
        if self.has_server_hello() {
            match self.union.take() {
                ::std::option::Option::Some(remote_message::Union::server_hello(v)) => v,
                _ => panic!(),
            }
        } else {
            ServerHello::new()
        }
    }

    // .LoginRequest login_request = 3;

    pub fn get_login_request(&self) -> &LoginRequest {
        match self.union {
            ::std::option::Option::Some(remote_message::Union::login_request(ref v)) => v,
            _ => <LoginRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_login_request(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_login_request(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(remote_message::Union::login_request(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_login_request(&mut self, v: LoginRequest) {
        self.union = ::std::option::Option::Some(remote_message::Union::login_request(v))
    }

    // Mutable pointer to the field.
    pub fn mut_login_request(&mut self) -> &mut LoginRequest {
        if let ::std::option::Option::Some(remote_message::Union::login_request(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(remote_message::Union::login_request(LoginRequest::new()));
        }
        match self.union {
            ::std::option::Option::Some(remote_message::Union::login_request(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_login_request(&mut self) -> LoginRequest {
        if self.has_login_request() {
            match self.union.take() {
                ::std::option::Option::Some(remote_message::Union::login_request(v)) => v,
                _ => panic!(),
            }
        } else {
            LoginRequest::new()
        }
    }

    // .LoginResponse login_response = 4;

    pub fn get_login_response(&self) -> &LoginResponse {
        match self.union {
            ::std::option::Option::Some(remote_message::Union::login_response(ref v)) => v,
            _ => <LoginResponse as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_login_response(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_login_response(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(remote_message::Union::login_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_login_response(&mut self, v: LoginResponse) {
        self.union = ::std::option::Option::Some(remote_message::Union::login_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_login_response(&mut self) -> &mut LoginResponse {
        if let ::std::option::Option::Some(remote_message::Union::login_response(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(remote_message::Union::login_response(LoginResponse::new()));
        }
        match self.union {
            ::std::option::Option::Some(remote_message::Union::login_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_login_response(&mut self) -> LoginResponse {
        if self.has_login_response() {
            match self.union.take() {
                ::std::option::Option::Some(remote_message::Union::login_response(v)) => v,
                _ => panic!(),
            }
        } else {
            LoginResponse::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ClientHello>(
            "client_hello",
            RemoteMessage::has_client_hello,
            RemoteMessage::get_client_hello,
            RemoteMessage::mut_client_hello,
            RemoteMessage::set_client_hello,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ServerHello>(
            "server_hello",
            RemoteMessage::has_server_hello,
            RemoteMessage::get_server_hello,
            RemoteMessage::mut_server_hello,
            RemoteMessage::set_server_hello,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, LoginRequest>(
            "login_request",
            RemoteMessage::has_login_request,
            RemoteMessage::get_login_request,
            RemoteMessage::mut_login_request,
            RemoteMessage::set_login_request,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, LoginResponse>(
            "login_response",
            RemoteMessage::has_login_response,
            RemoteMessage::get_login_response,
            RemoteMessage::mut_login_response,
            RemoteMessage::set_login_response,
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RemoteMessage>(
            "RemoteMessage",
            4,
            fields,
        )
    }
}

impl ::protobuf::Message for RemoteMessage {
    fn is_initialized(&self) -> bool {
        if let Some(remote_message::Union::client_hello(ref v)) = self.union {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(remote_message::Union::server_hello(ref v)) = self.union {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(remote_message::Union::login_request(ref v)) = self.union {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(remote_message::Union::login_response(ref v)) = self.union {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.union = ::std::option::Option::Some(remote_message::Union::client_hello(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.union = ::std::option::Option::Some(remote_message::Union::server_hello(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.union = ::std::option::Option::Some(remote_message::Union::login_request(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.union = ::std::option::Option::Some(remote_message::Union::login_response(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &remote_message::Union::client_hello(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &remote_message::Union::server_hello(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &remote_message::Union::login_request(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &remote_message::Union::login_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &remote_message::Union::client_hello(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &remote_message::Union::server_hello(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &remote_message::Union::login_request(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &remote_message::Union::login_response(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> RemoteMessage {
        RemoteMessage::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 4)
    }

    fn default_instance() -> &'static RemoteMessage {
        static instance: RemoteMessage = RemoteMessage {
            union: ::std::option::Option::None,
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for RemoteMessage {
    fn clear(&mut self) {
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RemoteMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RemoteMessage {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `RemoteMessage`
pub mod remote_message {

    #[derive(Clone,PartialEq,Debug)]
    pub enum Union {
        client_hello(super::ClientHello),
        server_hello(super::ServerHello),
        login_request(super::LoginRequest),
        login_response(super::LoginResponse),
    }

    impl ::protobuf::Oneof for Union {
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ChannelMover {
    // message fields
    pub id: u32,
    pub control: ::protobuf::ProtobufEnumOrUnknown<ChannelControl>,
    pub channel_type: ::protobuf::ProtobufEnumOrUnknown<ChannelType>,
    pub channel_power: ::protobuf::ProtobufEnumOrUnknown<ChannelPower>,
    pub data: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a ChannelMover {
    fn default() -> &'a ChannelMover {
        <ChannelMover as ::protobuf::Message>::default_instance()
    }
}

impl ChannelMover {
    pub fn new() -> ChannelMover {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &ChannelMover| { &m.id },
            |m: &mut ChannelMover| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "control",
            |m: &ChannelMover| { &m.control },
            |m: &mut ChannelMover| { &mut m.control },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "channel_type",
            |m: &ChannelMover| { &m.channel_type },
            |m: &mut ChannelMover| { &mut m.channel_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "channel_power",
            |m: &ChannelMover| { &m.channel_power },
            |m: &mut ChannelMover| { &mut m.channel_power },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &ChannelMover| { &m.data },
            |m: &mut ChannelMover| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChannelMover>(
            "ChannelMover",
            5,
            fields,
        )
    }
}

impl ::protobuf::Message for ChannelMover {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.id = is.read_uint32()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.control = is.read_enum_or_unknown()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.channel_type = is.read_enum_or_unknown()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.channel_power = is.read_enum_or_unknown()?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = is.read_bytes()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.control != ::protobuf::ProtobufEnumOrUnknown::new(ChannelControl::Create) {
            my_size += ::protobuf::rt::enum_or_unknown_size(2, self.control);
        }
        if self.channel_type != ::protobuf::ProtobufEnumOrUnknown::new(ChannelType::NoDefine) {
            my_size += ::protobuf::rt::enum_or_unknown_size(3, self.channel_type);
        }
        if self.channel_power != ::protobuf::ProtobufEnumOrUnknown::new(ChannelPower::Both) {
            my_size += ::protobuf::rt::enum_or_unknown_size(4, self.channel_power);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if self.control != ::protobuf::ProtobufEnumOrUnknown::new(ChannelControl::Create) {
            os.write_enum(2, ::protobuf::ProtobufEnumOrUnknown::value(&self.control))?;
        }
        if self.channel_type != ::protobuf::ProtobufEnumOrUnknown::new(ChannelType::NoDefine) {
            os.write_enum(3, ::protobuf::ProtobufEnumOrUnknown::value(&self.channel_type))?;
        }
        if self.channel_power != ::protobuf::ProtobufEnumOrUnknown::new(ChannelPower::Both) {
            os.write_enum(4, ::protobuf::ProtobufEnumOrUnknown::value(&self.channel_power))?;
        }
        if !self.data.is_empty() {
            os.write_bytes(5, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> ChannelMover {
        ChannelMover::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 5)
    }

    fn default_instance() -> &'static ChannelMover {
        static instance: ChannelMover = ChannelMover {
            id: 0,
            control: ::protobuf::ProtobufEnumOrUnknown::from_i32(0),
            channel_type: ::protobuf::ProtobufEnumOrUnknown::from_i32(0),
            channel_power: ::protobuf::ProtobufEnumOrUnknown::from_i32(0),
            data: ::std::vec::Vec::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for ChannelMover {
    fn clear(&mut self) {
        self.id = 0;
        self.control = ::protobuf::ProtobufEnumOrUnknown::new(ChannelControl::Create);
        self.channel_type = ::protobuf::ProtobufEnumOrUnknown::new(ChannelType::NoDefine);
        self.channel_power = ::protobuf::ProtobufEnumOrUnknown::new(ChannelPower::Both);
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChannelMover {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChannelMover {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct KeyEvent {
    // message fields
    pub key: u32,
    pub active: ::protobuf::ProtobufEnumOrUnknown<key_event::Active>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a KeyEvent {
    fn default() -> &'a KeyEvent {
        <KeyEvent as ::protobuf::Message>::default_instance()
    }
}

impl KeyEvent {
    pub fn new() -> KeyEvent {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &KeyEvent| { &m.key },
            |m: &mut KeyEvent| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "active",
            |m: &KeyEvent| { &m.active },
            |m: &mut KeyEvent| { &mut m.active },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KeyEvent>(
            "KeyEvent",
            6,
            fields,
        )
    }
}

impl ::protobuf::Message for KeyEvent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.key = is.read_uint32()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.active = is.read_enum_or_unknown()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.key != 0 {
            my_size += ::protobuf::rt::value_size(1, self.key, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.active != ::protobuf::ProtobufEnumOrUnknown::new(key_event::Active::Click) {
            my_size += ::protobuf::rt::enum_or_unknown_size(2, self.active);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.key != 0 {
            os.write_uint32(1, self.key)?;
        }
        if self.active != ::protobuf::ProtobufEnumOrUnknown::new(key_event::Active::Click) {
            os.write_enum(2, ::protobuf::ProtobufEnumOrUnknown::value(&self.active))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> KeyEvent {
        KeyEvent::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 6)
    }

    fn default_instance() -> &'static KeyEvent {
        static instance: KeyEvent = KeyEvent {
            key: 0,
            active: ::protobuf::ProtobufEnumOrUnknown::from_i32(0),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for KeyEvent {
    fn clear(&mut self) {
        self.key = 0;
        self.active = ::protobuf::ProtobufEnumOrUnknown::new(key_event::Active::Click);
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for KeyEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KeyEvent {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `KeyEvent`
pub mod key_event {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    pub enum Active {
        Click = 0,
        Down = 1,
        Up = 2,
    }

    impl ::protobuf::ProtobufEnum for Active {
        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Active> {
            match value {
                0 => ::std::option::Option::Some(Active::Click),
                1 => ::std::option::Option::Some(Active::Down),
                2 => ::std::option::Option::Some(Active::Up),
                _ => ::std::option::Option::None
            }
        }

        fn values() -> &'static [Self] {
            static values: &'static [Active] = &[
                Active::Click,
                Active::Down,
                Active::Up,
            ];
            values
        }

        fn enum_descriptor_static() -> ::protobuf::reflect::EnumDescriptor {
            ::protobuf::reflect::EnumDescriptor::new_generated_2(super::file_descriptor(), 4)
        }
    }

    impl ::std::default::Default for Active {
        fn default() -> Self {
            Active::Click
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Active {
        type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeEnum<Self>;
    }

    impl Active {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new_2::<Active>("KeyEvent.Active", 4)
        }
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MouseEvent {
    // message fields
    pub key: u32,
    pub active: ::protobuf::ProtobufEnumOrUnknown<mouse_event::Active>,
    pub move_x: i32,
    pub move_y: i32,
    pub scroll_len: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a MouseEvent {
    fn default() -> &'a MouseEvent {
        <MouseEvent as ::protobuf::Message>::default_instance()
    }
}

impl MouseEvent {
    pub fn new() -> MouseEvent {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &MouseEvent| { &m.key },
            |m: &mut MouseEvent| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "active",
            |m: &MouseEvent| { &m.active },
            |m: &mut MouseEvent| { &mut m.active },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "move_x",
            |m: &MouseEvent| { &m.move_x },
            |m: &mut MouseEvent| { &mut m.move_x },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "move_y",
            |m: &MouseEvent| { &m.move_y },
            |m: &mut MouseEvent| { &mut m.move_y },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "scroll_len",
            |m: &MouseEvent| { &m.scroll_len },
            |m: &mut MouseEvent| { &mut m.scroll_len },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MouseEvent>(
            "MouseEvent",
            7,
            fields,
        )
    }
}

impl ::protobuf::Message for MouseEvent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.key = is.read_uint32()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.active = is.read_enum_or_unknown()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.move_x = is.read_int32()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.move_y = is.read_int32()?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.scroll_len = is.read_int32()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.key != 0 {
            my_size += ::protobuf::rt::value_size(1, self.key, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.active != ::protobuf::ProtobufEnumOrUnknown::new(mouse_event::Active::Click) {
            my_size += ::protobuf::rt::enum_or_unknown_size(2, self.active);
        }
        if self.move_x != 0 {
            my_size += ::protobuf::rt::value_size(3, self.move_x, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.move_y != 0 {
            my_size += ::protobuf::rt::value_size(4, self.move_y, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.scroll_len != 0 {
            my_size += ::protobuf::rt::value_size(5, self.scroll_len, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.key != 0 {
            os.write_uint32(1, self.key)?;
        }
        if self.active != ::protobuf::ProtobufEnumOrUnknown::new(mouse_event::Active::Click) {
            os.write_enum(2, ::protobuf::ProtobufEnumOrUnknown::value(&self.active))?;
        }
        if self.move_x != 0 {
            os.write_int32(3, self.move_x)?;
        }
        if self.move_y != 0 {
            os.write_int32(4, self.move_y)?;
        }
        if self.scroll_len != 0 {
            os.write_int32(5, self.scroll_len)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> MouseEvent {
        MouseEvent::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 7)
    }

    fn default_instance() -> &'static MouseEvent {
        static instance: MouseEvent = MouseEvent {
            key: 0,
            active: ::protobuf::ProtobufEnumOrUnknown::from_i32(0),
            move_x: 0,
            move_y: 0,
            scroll_len: 0,
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for MouseEvent {
    fn clear(&mut self) {
        self.key = 0;
        self.active = ::protobuf::ProtobufEnumOrUnknown::new(mouse_event::Active::Click);
        self.move_x = 0;
        self.move_y = 0;
        self.scroll_len = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MouseEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MouseEvent {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `MouseEvent`
pub mod mouse_event {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    pub enum Active {
        Click = 0,
        Down = 1,
        Up = 2,
        Move = 3,
        ScrollY = 4,
    }

    impl ::protobuf::ProtobufEnum for Active {
        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Active> {
            match value {
                0 => ::std::option::Option::Some(Active::Click),
                1 => ::std::option::Option::Some(Active::Down),
                2 => ::std::option::Option::Some(Active::Up),
                3 => ::std::option::Option::Some(Active::Move),
                4 => ::std::option::Option::Some(Active::ScrollY),
                _ => ::std::option::Option::None
            }
        }

        fn values() -> &'static [Self] {
            static values: &'static [Active] = &[
                Active::Click,
                Active::Down,
                Active::Up,
                Active::Move,
                Active::ScrollY,
            ];
            values
        }

        fn enum_descriptor_static() -> ::protobuf::reflect::EnumDescriptor {
            ::protobuf::reflect::EnumDescriptor::new_generated_2(super::file_descriptor(), 5)
        }
    }

    impl ::std::default::Default for Active {
        fn default() -> Self {
            Active::Click
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Active {
        type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeEnum<Self>;
    }

    impl Active {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new_2::<Active>("MouseEvent.Active", 5)
        }
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
pub enum ChannelControl {
    Create = 0,
    Destroy = 1,
    Data = 2,
}

impl ::protobuf::ProtobufEnum for ChannelControl {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ChannelControl> {
        match value {
            0 => ::std::option::Option::Some(ChannelControl::Create),
            1 => ::std::option::Option::Some(ChannelControl::Destroy),
            2 => ::std::option::Option::Some(ChannelControl::Data),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ChannelControl] = &[
            ChannelControl::Create,
            ChannelControl::Destroy,
            ChannelControl::Data,
        ];
        values
    }

    fn enum_descriptor_static() -> ::protobuf::reflect::EnumDescriptor {
        ::protobuf::reflect::EnumDescriptor::new_generated_2(file_descriptor(), 0)
    }
}

impl ::std::default::Default for ChannelControl {
    fn default() -> Self {
        ChannelControl::Create
    }
}

impl ::protobuf::reflect::ProtobufValue for ChannelControl {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeEnum<Self>;
}

impl ChannelControl {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new_2::<ChannelControl>("ChannelControl", 0)
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
pub enum ChannelType {
    NoDefine = 0,
    Video = 1,
    KeyEvent = 2,
    MouseEvent = 3,
}

impl ::protobuf::ProtobufEnum for ChannelType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ChannelType> {
        match value {
            0 => ::std::option::Option::Some(ChannelType::NoDefine),
            1 => ::std::option::Option::Some(ChannelType::Video),
            2 => ::std::option::Option::Some(ChannelType::KeyEvent),
            3 => ::std::option::Option::Some(ChannelType::MouseEvent),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ChannelType] = &[
            ChannelType::NoDefine,
            ChannelType::Video,
            ChannelType::KeyEvent,
            ChannelType::MouseEvent,
        ];
        values
    }

    fn enum_descriptor_static() -> ::protobuf::reflect::EnumDescriptor {
        ::protobuf::reflect::EnumDescriptor::new_generated_2(file_descriptor(), 1)
    }
}

impl ::std::default::Default for ChannelType {
    fn default() -> Self {
        ChannelType::NoDefine
    }
}

impl ::protobuf::reflect::ProtobufValue for ChannelType {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeEnum<Self>;
}

impl ChannelType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new_2::<ChannelType>("ChannelType", 1)
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
pub enum ChannelPower {
    Both = 0,
    Read = 1,
    Write = 2,
}

impl ::protobuf::ProtobufEnum for ChannelPower {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ChannelPower> {
        match value {
            0 => ::std::option::Option::Some(ChannelPower::Both),
            1 => ::std::option::Option::Some(ChannelPower::Read),
            2 => ::std::option::Option::Some(ChannelPower::Write),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ChannelPower] = &[
            ChannelPower::Both,
            ChannelPower::Read,
            ChannelPower::Write,
        ];
        values
    }

    fn enum_descriptor_static() -> ::protobuf::reflect::EnumDescriptor {
        ::protobuf::reflect::EnumDescriptor::new_generated_2(file_descriptor(), 2)
    }
}

impl ::std::default::Default for ChannelPower {
    fn default() -> Self {
        ChannelPower::Both
    }
}

impl ::protobuf::reflect::ProtobufValue for ChannelPower {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeEnum<Self>;
}

impl ChannelPower {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new_2::<ChannelPower>("ChannelPower", 2)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rmessage.proto\"\x9d\x01\n\x0bClientHello\x12\x15\n\x05my_id\x18\x01\
    \x20\x01(\tR\x04myIdB\0\x12\x19\n\x07peer_id\x18\x02\x20\x01(\tR\x06peer\
    IdB\0\x12\x16\n\x05rand1\x18\x03\x20\x01(\x04R\x05rand1B\0\x12\x16\n\x05\
    rand2\x18\x04\x20\x01(\x04R\x05rand2B\0\x12\x12\n\x03key\x18\x05\x20\x01\
    (\x0cR\x03keyB\0\x12\x16\n\x05nonce\x18\x06\x20\x01(\x0cR\x05nonceB\0:\0\
    \"U\n\x0bServerHello\x12\x16\n\x05rand1\x18\x01\x20\x01(\x04R\x05rand1B\
    \0\x12\x16\n\x05rand2\x18\x02\x20\x01(\x04R\x05rand2B\0\x12\x14\n\x04has\
    h\x18\x03\x20\x01(\x0cR\x04hashB\0:\0\"D\n\x0cLoginRequest\x12\x1c\n\x08\
    password\x18\x01\x20\x01(\x0cR\x08passwordB\0\x12\x14\n\x04hash\x18\x02\
    \x20\x01(\x0cR\x04hashB\0:\0\"\x8f\x01\n\rLoginResponse\x12)\n\x04code\
    \x18\x01\x20\x01(\x0e2\x13.LoginResponse.CodeR\x04codeB\0\x12\x16\n\x05e\
    rror\x18\x02\x20\x01(\tR\x05errorB\0\"9\n\x04Code\x12\x0e\n\x08NotMatch\
    \x10\0\x1a\0\x12\r\n\x07Success\x10\x01\x1a\0\x12\x10\n\nFrequently\x10\
    \x02\x1a\0\x1a\0:\0\"\xf9\x01\n\rRemoteMessage\x123\n\x0cclient_hello\
    \x18\x01\x20\x01(\x0b2\x0c.ClientHelloH\0R\x0bclientHelloB\0\x123\n\x0cs\
    erver_hello\x18\x02\x20\x01(\x0b2\x0c.ServerHelloH\0R\x0bserverHelloB\0\
    \x126\n\rlogin_request\x18\x03\x20\x01(\x0b2\r.LoginRequestH\0R\x0clogin\
    RequestB\0\x129\n\x0elogin_response\x18\x04\x20\x01(\x0b2\x0e.LoginRespo\
    nseH\0R\rloginResponseB\0B\t\n\x05union\x12\0:\0\"\xce\x01\n\x0cChannelM\
    over\x12\x10\n\x02id\x18\x01\x20\x01(\rR\x02idB\0\x12+\n\x07control\x18\
    \x02\x20\x01(\x0e2\x0f.ChannelControlR\x07controlB\0\x121\n\x0cchannel_t\
    ype\x18\x03\x20\x01(\x0e2\x0c.ChannelTypeR\x0bchannelTypeB\0\x124\n\rcha\
    nnel_power\x18\x04\x20\x01(\x0e2\r.ChannelPowerR\x0cchannelPowerB\0\x12\
    \x14\n\x04data\x18\x05\x20\x01(\x0cR\x04dataB\0:\0\"{\n\x08KeyEvent\x12\
    \x12\n\x03key\x18\x01\x20\x01(\rR\x03keyB\0\x12*\n\x06active\x18\x02\x20\
    \x01(\x0e2\x10.KeyEvent.ActiveR\x06activeB\0\"-\n\x06Active\x12\x0b\n\
    \x05Click\x10\0\x1a\0\x12\n\n\x04Down\x10\x01\x1a\0\x12\x08\n\x02Up\x10\
    \x02\x1a\0\x1a\0:\0\"\xed\x01\n\nMouseEvent\x12\x12\n\x03key\x18\x01\x20\
    \x01(\rR\x03keyB\0\x12,\n\x06active\x18\x02\x20\x01(\x0e2\x12.MouseEvent\
    .ActiveR\x06activeB\0\x12\x17\n\x06move_x\x18\x03\x20\x01(\x05R\x05moveX\
    B\0\x12\x17\n\x06move_y\x18\x04\x20\x01(\x05R\x05moveYB\0\x12\x1f\n\nscr\
    oll_len\x18\x05\x20\x01(\x05R\tscrollLenB\0\"H\n\x06Active\x12\x0b\n\x05\
    Click\x10\0\x1a\0\x12\n\n\x04Down\x10\x01\x1a\0\x12\x08\n\x02Up\x10\x02\
    \x1a\0\x12\n\n\x04Move\x10\x03\x1a\0\x12\r\n\x07ScrollY\x10\x04\x1a\0\
    \x1a\0:\0*;\n\x0eChannelControl\x12\x0c\n\x06Create\x10\0\x1a\0\x12\r\n\
    \x07Destroy\x10\x01\x1a\0\x12\n\n\x04Data\x10\x02\x1a\0\x1a\0*N\n\x0bCha\
    nnelType\x12\x0e\n\x08NoDefine\x10\0\x1a\0\x12\x0b\n\x05Video\x10\x01\
    \x1a\0\x12\x0e\n\x08KeyEvent\x10\x02\x1a\0\x12\x10\n\nMouseEvent\x10\x03\
    \x1a\0\x1a\0*5\n\x0cChannelPower\x12\n\n\x04Both\x10\0\x1a\0\x12\n\n\x04\
    Read\x10\x01\x1a\0\x12\x0b\n\x05Write\x10\x02\x1a\0\x1a\0B\0b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> ::protobuf::reflect::FileDescriptor {
    static file_descriptor_lazy: ::protobuf::rt::LazyV2<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::LazyV2::INIT;
    let file_descriptor = file_descriptor_lazy.get(|| {
        let mut deps = ::std::vec::Vec::new();
        let mut messages = ::std::vec::Vec::new();
        messages.push(ClientHello::generated_message_descriptor_data());
        messages.push(ServerHello::generated_message_descriptor_data());
        messages.push(LoginRequest::generated_message_descriptor_data());
        messages.push(LoginResponse::generated_message_descriptor_data());
        messages.push(RemoteMessage::generated_message_descriptor_data());
        messages.push(ChannelMover::generated_message_descriptor_data());
        messages.push(KeyEvent::generated_message_descriptor_data());
        messages.push(MouseEvent::generated_message_descriptor_data());
        let mut enums = ::std::vec::Vec::new();
        enums.push(ChannelControl::generated_enum_descriptor_data());
        enums.push(ChannelType::generated_enum_descriptor_data());
        enums.push(ChannelPower::generated_enum_descriptor_data());
        enums.push(login_response::Code::generated_enum_descriptor_data());
        enums.push(key_event::Active::generated_enum_descriptor_data());
        enums.push(mouse_event::Active::generated_enum_descriptor_data());
        ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
            file_descriptor_proto(),
            deps,
            messages,
            enums,
        )
    });
    ::protobuf::reflect::FileDescriptor::new_generated_2(file_descriptor)
}
